setwd("~/Documents/2020")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("ropensci/rotl")
devtools::install_github("ropensci/traits")
install.packages('phylotaR')
devtools::install_github(repo='ropensci/phylotaR', build_vignettes=TRUE)
library(rotl)
library(phylotaR)
apes <- c("Pongo", "Pan", "Gorilla", "Hoolock", "Homo")
(resolved_names <- tnrs_match_names(apes))
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
(resolved_names <- tnrs_match_names(ants))
tr <- tol_induced_subtree(ott_ids = ott_id(resolved_names))
plot(tr)
library(rentrez)
entrez_search(db = "Nucleotide", term="Ectatomma", api_key ="96b569c049fe3d3055c5b747112dfec84308")
Ectatomma <- entrez_search(db = "Nucleotide", term="Ectatomma AND 2018:2019[PDAT]", retmax = 100, api_key ="96b569c049fe3d3055c5b747112dfec84308")
for( seq_start in seq(1,50,100)){
recs <- entrez_fetch(db="nuccore", id = Ectatomma$ids,
rettype="fasta", retmax=50, retstart=seq_start)
cat(recs, file="Ect.seqs.fasta", append=TRUE)
cat(seq_start+49, "sequences downloaded\r")
}
search_year <- function(ant){
query <- paste0(ant, " AND ", "2018:2019[PDAT]")
search_returns <- c(entrez_search(db="Nucleotide", term=query, retmax=20,api_key ="96b569c049fe3d3055c5b747112dfec84308"))
return(search_returns)
}
ants <- as.vector(resolved_names$unique_name)
labels <- sapply(ants,search_year,  USE.NAMES = T)
xymmer_papers <- entrez_search(db="pmc", term="Xymmer", retmax=20, rettype= "text", api_key ="96b569c049fe3d3055c5b747112dfec84308")
xymmer_papers <- entrez_fetch(db="pmc", term="Xymmer", id = xymmer_papers$ids, retmax=20, rettype= "text", api_key ="96b569c049fe3d3055c5b747112dfec84308")
search_year <- function(ant){
search_returns = c()
query <- paste0(ant, " AND ", "2018:2019[PDAT]")
search_returns[ant] <- c(entrez_search(db="Nucleotide", term=query, retmax=20,api_key ="96b569c049fe3d3055c5b747112dfec84308"))
return(search_returns)
}
ants <- as.vector(resolved_names$unique_name)
labels <- sapply(ants,search_year,  USE.NAMES = T)
search_seq <- function(ant){
recs[ant] <- entrez_fetch(db="nuccore", id = ant,
rettype="fasta", retmax=10)
cat(recs, file="Ants.seqs.fasta", append=TRUE)
return(recs)
}
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
search_seq <- function(ants){
recs[ant] <- entrez_fetch(db="nuccore", id = ant,
rettype="fasta", retmax=10)
cat(recs, file="Ants.seqs.fasta", append=TRUE)
return(recs)
}
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
search_seq <- function(ants){
recs[ant] <- entrez_fetch(db="nuccore", id = ants,
rettype="fasta", retmax=10)
cat(recs, file="Ants.seqs.fasta", append=TRUE)
return(recs)
}
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
ants
labels
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
seq_returns <- sapply(labels$Aneuretus.Aneuretus, search_seq,  USE.NAMES = T)
seq_returns <- sapply(labels$Aneuretus.Aneuretus, search_seq,  USE.NAMES = T)
search_seq(labels$Atta.Atta)
search_seq <- function(ant){
recs[ant] <- entrez_fetch(db="nuccore", id = ant,
rettype="fasta", retmax=10)
cat(recs, file="Ants.seqs.fasta", append=TRUE)
return(recs)
}
search_seq(labels$Atta.Atta)
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
labels
search_year <- function(ant){
query <- paste0(ant, " AND ", "2016:2019[PDAT]")
search_returns <- c(entrez_search(db="Nucleotide", term=query, retmax=20,api_key ="96b569c049fe3d3055c5b747112dfec84308"))
return(search_returns)
}
ants <- as.vector(resolved_names$unique_name)
labels <- sapply(ants,search_year,  USE.NAMES = T)
labels
search_year <- function(ant){
search_returns = c()
query <- paste0(ant, " AND ", "2016:2019[PDAT]")
search_returns[ant] <- c(entrez_search(db="Nucleotide", term=query, retmax=20,api_key ="96b569c049fe3d3055c5b747112dfec84308"))
return(search_returns)
}
ants <- as.vector(resolved_names$unique_name)
labels <- sapply(ants,search_year,  USE.NAMES = T)
labels
search_seq <- function(ant){
recs[ant] <- entrez_fetch(db="nuccore", id = ant,
rettype="fasta", retmax=10)
cat(recs, file="Ants.seqs.fasta", append=TRUE)
return(recs)
}
seq_returns <- sapply(labels, search_seq,  USE.NAMES = T)
install.packages("rgbif")
install.packages("leaflet")
name_suggest("Atta mexicana")
library(rotl)
library(rgbif)
library(leaflet)
name_suggest("Atta mexicana")
occurences <- occ_search(taxonKey = 5035745, limit = 20)
library(tidyverse)
#library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(tidyverse)
library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(dplyr)
library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(tidyverse)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
library(rotl)
library(rgbif)
library(leaflet)
library(tidyverse)
name_suggest("Atta mexicana")
occurences <- occ_search(taxonKey = 5035745, limit = 20)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
no_na <- occurences$data %>%
dplyr::select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
no_na <- occurences$data %>%
dplyr::select(scientificName, decimalLatitude, decimalLongitude) %>%
dplyr::drop_na()
no_na <- occurences$data %>%
dplyr::select(scientificName, decimalLatitude, decimalLongitude) %>%
tidyverse::drop_na()
remotes::install_github("tidyverse")
remotes::install_github("hads::tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(rotl)
library(rgbif)
library(leaflet)
library(tidyverse)
name_suggest("Atta mexicana")
occurences <- occ_search(taxonKey = 5035745, limit = 20)
no_na <- occurences$data %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
k <- leaflet::leaflet(no_na) %>%
addTiles() %>%
addMarkers(~decimalLongitude, ~decimalLatitude, popup = no_na$scientificName)
k <- leaflet::leaflet(no_na) %>%
addTiles() %>%
addMarkers(~decimalLongitude, ~decimalLatitude, popup = no_na$scientificName)
k
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
#Get GBIF ids for our vector of species.
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$key)
}
#Search GBIF for the vector of IDs.
df <- lapply(ids, occ_search, return="data")
#Combine the resultant dataframes into one large dataframe
mega_df <- bind_rows(df, .id = "column_label")
#Drop rows with NA values in the lat and long
no_na <- mega_df %>%
select(scientificName, decimalLatitude, decimalLongitude) %>%
drop_na()
mega_df
df
ids
ants
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$key)
}
ids
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$key)
return(ids)
}
ids
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$key)
print(ids)
return(ids)
}
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$key)
print(raw$key)
}
raw
raw$key
raw$data$key
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
#Get GBIF ids for our vector of species.
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$data$key)
print(ids)
return(ids)
}
ids
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
#Get GBIF ids for our vector of species.
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$data)
print(ids)
return(ids)
}
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
#Get GBIF ids for our vector of species.
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$data)
return(ids)
}
#Search GBIF for the vector of IDs.
df <- lapply(ids, occ_search, return="data")
?rgbif
?occ_search
#Search GBIF for the vector of IDs.
df <- lapply(ids, occ_search, return="data")
df
#Combine the resultant dataframes into one large dataframe
mega_df <- bind_rows(df, .id = "column_label")
df
ids
ids$Martialis
occsearch(ids, return="data")
occ_search(ids, return="data")
ants <- c("Martialis", "Atta", "Ectatomma", "Tatuidris", "Aneuretus", "Xymmer", "Aenictus")
#Get GBIF ids for our vector of species.
ids <-c()
for (ant in ants){
print(ant)
raw <- name_suggest(ant)
print(raw)
ids[ant] <- c(raw$data)
return(ids)
}
